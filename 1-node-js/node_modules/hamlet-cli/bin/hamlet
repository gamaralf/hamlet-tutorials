#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
(function() {
  var CoffeeScript, cli, compile, dir, encoding, files, fs, hamlExtension, parser, stdin, wrench, _ref;

  fs = require("fs");

  stdin = require("stdin");

  _ref = require('hamlet-compiler'), parser = _ref.parser, compile = _ref.compile;

  wrench = require("wrench");

  CoffeeScript = require("coffee-script");

  cli = require("commander").version(require('../package.json').version).option("-a, --ast", "Output AST").option("-d, --dir [directory]", "Compile all haml files in the given directory").option("--encoding [encoding]", "Encoding of files being read from --dir (default 'utf-8')").option("-e, --exports [name]", "Export compiled template as (default 'module.exports'").option("-r, --runtime [provider]", "Runtime provider").parse(process.argv);

  encoding = cli.encoding || "utf-8";

  hamlExtension = /\.haml$/;

  if ((dir = cli.dir)) {
    dir = dir.replace(/\/*$/, "/");
    files = wrench.readdirSyncRecursive(dir);
    files.forEach(function(path) {
      var exports, inPath, input, outPath, program;
      inPath = "" + dir + path;
      if (fs.lstatSync(inPath).isFile()) {
        if (inPath.match(hamlExtension)) {
          outPath = inPath.replace(hamlExtension, ".js");
          console.log("Compiling " + inPath + " to " + outPath);
          input = fs.readFileSync(inPath, {
            encoding: encoding
          });
          if (cli.exports) {
            exports = cli.exports.replace("$file", path.replace(hamlExtension, ""));
          }
          program = compile(parser.parse(input), {
            runtime: cli.runtime,
            exports: exports,
            compiler: CoffeeScript
          });
          return fs.writeFileSync(outPath, program);
        }
      }
    });
  } else {
    stdin(function(input) {
      if (cli.ast) {
        process.stdout.write(JSON.stringify(ast));
      } else {
        return process.stdout.write(compile(parser.parse(input), {
          runtime: cli.runtime,
          exports: cli.exports,
          compiler: CoffeeScript
        }));
      }
    });
  }

}).call(this);
